% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spc_output.R
\name{spc_output}
\alias{spc_output}
\title{Main function to return desired statistical process output}
\usage{
spc_output(
  data,
  indicator,
  time_field,
  value,
  exclude_outliers = FALSE,
  base_date_range = NULL,
  rebase_dates = NULL,
  rebase_data_frame = NULL,
  target = NULL,
  mode = "static",
  output = "chart",
  summary_output = "table",
  package = NULL,
  plot_title = NULL,
  yrange = NULL,
  group_average = FALSE,
  line_breaks = FALSE,
  chart_theme = NULL,
  nad = FALSE,
  time_unit = "month"
)
}
\arguments{
\item{data}{A df with the following columns: 1. A indicator column, e.g. KPI (used to group by if processing more than one indicator); 2. A time field (dates); 3. A value field reflecting performance; 4. A polarity field indicting whether an upward trend indicates improvement ("up", "down", "neutral"); 5. A field called greater_than_hundred indicating whether the value can be legitimately over 100; 6. A field called less_than_zero indicating whether the value can be below zero (T / F); 7. A unit column indicating type of data ("percent" or "count")}

\item{indicator}{The column in data reflecting the group by column, as a character string. If no grouping column exists, set as NULL.}

\item{time_field}{The column in data reflecting the time component, as a character string}

\item{value}{The column in data reflecting the value component to be measured, as a character string}

\item{exclude_outliers}{Set to T if outliers are desired to be excluded from process calculations
Reflects periods of rebasing. Can be rebased multiple times. Processing function will fill dates of rebasing downwards. E.g. above example, there will be three groups, start:2021-09-01, 2021-10-01:2022-06-01, 2022-07-01:end}

\item{base_date_range}{A base date range, structure like c("2021-02-01", "2021-09-01") i.e. c(start, end)}

\item{rebase_dates}{Manually decided rebasing of dates. Structured like c("2021-09-01", "2022-06-01").}

\item{rebase_data_frame}{Defaults to NULL. Assign dataframe of interest if you have a dataframe of rebase dates by indicator. Dataframe will join by indicator, meaning unique rebase dates can be applied on mass to multiple indicators during processing. If indicator does not exist in rebasing df, then no rebasing will occur to particular indicator.}

\item{target}{Defaults to NULL. Target can either be inputted as a column character string or a known integer, e.g. 80}

\item{mode}{"interactive" or "static", depending on output desired. Applied to narratives and summaries}

\item{output}{"data", "chart", "summary", "narrative" or "status"}

\item{summary_output}{The desired output type of summary, depending on intentions. Either "table", which produces the final table summary (flextable or reactable depending on mode), or "dataframe", which returns the summary as is before the final table output. Allows for further editing.}

\item{package}{In respect to interactive charts output, "ggplot2", "echarts"/"echarts4r" or "plotly"}

\item{plot_title}{Provides the plot with a title if the output is chart}

\item{yrange}{Provides a axis range if the output is chart. Argument should be c(min,max). A count of 5 is +/- from values}

\item{group_average}{Compare a metric value against the process of the average of a group of metrics. Defaults to F.}

\item{line_breaks}{Defaults to F. Determines whether lines will have breaks between rebasing (LCL, UCL and Mean)}

\item{chart_theme}{Theme for chart. Uses spc_chart_options function (see ?HccSPC::spc_chart_options()).}

\item{nad}{Numerator and denominator. Set to TRUE if you have a Numerator and Denominator column and want to present them figures in the table}

\item{time_unit}{Defaults to "month". Can set as "day", "month", "quarter" or "week". Only relevant when using summary and narrative outputs. Chart only impacted if "quarter" is selected.}
}
\description{
A general function used to return a desired statistical process output without needing to call individual output functions.

Dataframes going into this SPC function need te following columns (and if they do not exist, they will be defaulted within the function):
\itemize{
\item unit (either "count" of "percent")
\item greater_than_hundred (TRUE or FALSE). This implies whether the KPI/metric can theoretically exceed 100 (as a count or as a percentage) for graphical purposes
\item less_than_zero (TRUE or FALSE). This implies whether the KPI/metric can theoretically go below 0 (as a count or as a percentage) for graphical purposes
\item polarity ("down" or "up"). Determines whether an improvement is up or down
\item A time field
\item A value field
\item An indicator field
\item Target (optional)
}

Having columns for these indicators allows producing SPC charts/tables on mass with indicators of varying properties
}
\examples{

library(dplyr)

tooth_data <- force(ToothGrowth) \%>\%
  filter(supp == "VC") \%>\% slice(-15:-27) \%>\%
  mutate(Date = seq.Date(as.Date("2021-01-01"), as.Date("2021-01-17"), by = "days"),
  polarity = "up",
  greater_than_hundred = FALSE,
  less_than_zero = FALSE,
  unit = "count")


#Retreive SPC data
spc_output(
       data = tooth_data,
       time_field = "Date",
       indicator = "supp",
      value = "len",
       output = "data")

# Retrieve static SPC plot

spc_output(
data = tooth_data,
       rebase_dates = "2021-01-09", #With a rebase date,
time_field = "Date",
indicator = "supp",
value = "len",
output = "chart",
package = "ggplot") \%>\%
spc_add_icons() # with icons


spc_output(
data = tooth_data,
rebase_dates = c("2021-01-04", "2021-01-10"),
time_field = "Date",
indicator = "supp",
value = "len",
output = "chart",
package = "ggplot",
target = 30)


spc_output(
       data = tooth_data,
       time_field = "Date",
       indicator = "supp",
       value = "len",
       output = "chart",
       package = "ggplot",
       target = 30,
       plot_title = "Size of teeth (or something along those lines) SPC",
       time_unit = "day",
       chart_theme = spc_chart_options(x_label = "Day",
                                       y_label = "Count",
                                       x_label_format = "\%b-\%d",
                                       title_size = 25,
                                       x_breaks = "1 day"
                                       ))

# Retrieve SPC in plotly

spc_output(
       data = tooth_data,
       time_field = "Date",
       indicator = "supp",
       value = "len",
       output = "chart",
       package = "plotly")

# Retrieve SPC in echarts

spc_output(
       data = tooth_data,
       time_field = "Date",
       indicator = "supp",
       value = "len",
       output = "chart",
       package = "echarts") \%>\%
       spc_add_icons()


# Retrieve a narrative

spc_output(
       data = tooth_data,
       time_field = "Date",
       indicator = "supp",
       value = "len",
       output = "narrative")

spc_output(
       data = tooth_data,
       time_field = "Date",
       indicator = "supp",
       value = "len",
       output = "narrative",
       mode = "interactive")


# Retrieve summary table

spc_output(
       data = tooth_data,
       time_field = "Date",
       indicator = "supp",
       value = "len",
       output = "summary",
       mode = "static")

spc_output(
       data = tooth_data,
       time_field = "Date",
       indicator = "supp",
       value = "len",
       output = "summary",
       mode = "interactive",
       nad = FALSE)


}
